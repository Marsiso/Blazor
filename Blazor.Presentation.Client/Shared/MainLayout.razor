@inherits LayoutComponentBase
@using Blazor.Shared.Entities.Identity;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Blazor.Shared.Entities.DataTransferObjects
@using Blazor.Presentation.Client.Services
@using Blazored.SessionStorage
@using Syncfusion.Blazor.Popups
@using System.Text
@using System.Globalization
@using System.Net.Http.Headers
@using Polly
@using Polly.Retry
@using EditMode = Syncfusion.Blazor.Grids.EditMode
@inject NavigationManager NavigationManager
@inject SignOutSessionStateManager SignOutManager
@attribute [Authorize]

<div class="appbar-control-container">
    <SfAppBar ColorMode="AppBarColor.Dark">
        <SfButton CssClass="e-inherit" IconCss="e-icons e-home" OnClick="OnHomeBtnClick"></SfButton>
        <AuthorizeView Policy="@Policies.FromFrance" Context="_">
            <Authorized>
                <SfDropDownButton CssClass="e-inherit" IconCss="e-icons e-line-normal" Content="Account">
                    <DropDownMenuItems>
                       <DropDownMenuItem Text="Preview Password Reset Requests" IconCss="e-icons e-field-settings" Url="/Account/Password/Reset/Preview"></DropDownMenuItem>
                       <DropDownMenuItem Text="Manage Password Reset Email Template" IconCss="e-icons e-field-settings" Url="/Account/Password/Reset/Email/Template"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfDropDownButton>
            </Authorized>
        </AuthorizeView>
        
        <AuthorizeView Policy="@Policies.FromFrance">
            <Authorized>
                <SfDropDownButton CssClass="e-inherit" IconCss="e-icons e-line-normal" Content="Carousel">
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="Manage" IconCss="e-icons e-field-settings" Url="/Manage/CarouselItem"></DropDownMenuItem>
                        <DropDownMenuItem Text="Create" IconCss="e-icons e-insert-right" Url="/Manage/CarouselItem/Create"></DropDownMenuItem>
                        <DropDownMenuItem Text="Claims" IconCss="e-icons e-insert-right" Url="/Claims"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfDropDownButton>
            </Authorized>
        </AuthorizeView>

        <AuthorizeView Policy="@Policies.FromFrance">
            <Authorized>
                <SfDropDownButton CssClass="e-inherit" IconCss="e-icons e-line-normal" Content="Products">
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="Create" IconCss="e-icons e-insert-right"></DropDownMenuItem>
                        <DropDownMenuItem Text="Claims" IconCss="e-icons e-insert-right" Url="/Claims"></DropDownMenuItem>
                        <DropDownMenuItem Text="Manage" IconCss="e-icons e-field-settings" Url="/Management/Product"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfDropDownButton>
            </Authorized>
        </AuthorizeView>

        <AppBarSpacer></AppBarSpacer>

        <AuthorizeView>
            <Authorized>
                <SfButton CssClass="e-inherit" @onclick="OnCartBtnClick" Content="Cart">></SfButton>
                <SfButton CssClass="e-inherit" @onclick="BeginSignOut" IconCss="e-icons e-user" Content="Logout"><LoginDisplay></LoginDisplay></SfButton>
            </Authorized>
            <NotAuthorized>
                <SfButton CssClass="e-inherit" @onclick="OnCartBtnClick" Content="Cart">></SfButton>
                <SfButton CssClass="e-inherit" @onclick="BeginLogin" IconCss="e-icons e-user" Content="Login"><LoginDisplay></LoginDisplay></SfButton>
                <SfButton CssClass="e-inherit" @onclick="BeginSignin" IconCss="e-icons e-user" Content="Signin"></SfButton>
            </NotAuthorized>
        </AuthorizeView>
    </SfAppBar>
</div>
<br/>

<div class="page">
    <main>
        <article class="content px-4 text-center">
            <SfDialog  @ref="_dialogObj" @bind-Visible="@_visibility" Target="#target" Width="80%" Height="80%" 
                       ID="basket-dialog" CssClass="position-absolute top-50 start-50 translate-middle" ZIndex="1000" 
                       CloseOnEscape="true">
                <DialogTemplates>
                    <Header>
                        <span>@_header</span>
                    </Header>
                    <Content>
                       <SfGrid ID="basket-grid" TValue="ProcessedProduct" DataSource="@ShoppingCart.Items.Values" AllowPaging="true" AllowSorting="true"
                               AllowFiltering="true" AllowGrouping="true" AllowReordering="true" ShowColumnMenu="true"
                               EnableHover="false" Height="90%" Toolbar="@ToolbarItems">
                           <GridPageSettings PageSize="10"></GridPageSettings>
                           <GridEditSettings AllowDeleting="true"  Mode="EditMode.Batch"></GridEditSettings>
                           <GridEvents TValue="ProcessedProduct" OnBatchDelete="OnBatchDeleteHandler"></GridEvents>
                           <GridAggregates>
                               <GridAggregate>
                                   <GridAggregateColumns>
                                       <GridAggregateColumn Field=@nameof(ProcessedProduct.ProductPrice) Type="AggregateType.Custom">
                                           <FooterTemplate>
                                               @{
                                                    <p>@GetWeightedAggregate()</p>
                                               }
                                           </FooterTemplate>
                                       </GridAggregateColumn>
                                   </GridAggregateColumns>
                               </GridAggregate>
                           </GridAggregates>
                           <GridColumns>
                               <GridColumn Field=@nameof(ProcessedProduct.ProductName) HeaderText="Name" Type="ColumnType.String" TextAlign="TextAlign.Center" ></GridColumn>
                               <GridColumn Field=@nameof(ProcessedProduct.ProductQuantity) HeaderText="Quantity" Format="### ### ### Ks" Type="ColumnType.Number" TextAlign="TextAlign.Right" Width="180px"></GridColumn>
                               <GridColumn Field=@nameof(ProcessedProduct.ProductPrice) HeaderText="Price" Format="### ### ###.00 CZK" Type="ColumnType.Number" TextAlign="TextAlign.Right" Width="180px"></GridColumn>
                           </GridColumns>
                       </SfGrid>
                    </Content>
                    <FooterTemplate>
                        <AuthorizeView Context="ShoppingContext">
                            <Authorized>
                                <SfButton Content="Back" CssClass="e-flat" OnClick="@DlgButtonClick"></SfButton>
                                <SfButton Content="Buy" CssClass="e-flat" OnClick="@OnBuyBtnClick"></SfButton>
                            </Authorized>
                            <NotAuthorized>
                                <SfButton Content="Back" CssClass="e-flat" OnClick="@DlgButtonClick"></SfButton>
                                <SfButton Content="Buy" CssClass="e-flat" OnClick="@OnBuyBtnClick" Disabled="true"></SfButton>
                            </NotAuthorized>
                        </AuthorizeView>
                    </FooterTemplate>
                </DialogTemplates>
            </SfDialog>
            
            <CascadingValue Value="this">
                @Body
            </CascadingValue>
        </article>
    </main>
</div>

@code{
    private readonly string _header = "Basket";
    private SfDialog _dialogObj;
    private SfButton _buyBtnObj;
    private ProcessedProduct[] _products;
    private bool _visibility;
    private List<string> ToolbarItems = new(){ "Delete" };

    public ShoppingCart ShoppingCart { get; set; }
    
    public double TotalCartValue { get; set; }

    [Inject]
    public LocalStorageService LocalStorageService { get; set; }

    [Inject]
    public ISessionStorageService SessionStorageService { get; set; }
    
    [Inject]
    IHttpClientFactory HttpClientFactory { get; set; }

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    protected override async Task OnInitializedAsync() => ShoppingCart = await LocalStorageService.GetAsync<ShoppingCart>(nameof(Blazor.Shared.Entities.DataTransferObjects.ShoppingCart)) ?? new ShoppingCart();

    private string GetWeightedAggregate()
    {
    // Here, you can calculate custom aggregate operations and return the result.
        return ShoppingCart.Items.Values.Select(item => item.ProductPrice * item.ProductQuantity).AsQueryable().Sum().ToString("### ### ##0.00 CZK", CultureInfo.InvariantCulture);
    }
    
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        NavigationManager.NavigateTo("authentication/logout");
    }

    private void OnHomeBtnClick() => NavigationManager.NavigateTo("#");

    private void BeginLogin()
    {
        NavigationManager.NavigateTo("authentication/login");
    }

    private void BeginSignin()
    {
        NavigationManager.NavigateTo("account/register");
    }
    
    
    private async Task DlgButtonClick(object arg)
    {
        await this._dialogObj.HideAsync();
    }

    private async Task OnCartBtnClick(MouseEventArgs arg)
    {
        await this._dialogObj.ShowAsync();
    }

    private async Task OnBatchDeleteHandler(BeforeBatchDeleteArgs<ProcessedProduct> arg)
    {
        if (arg is not null)
        {
            ShoppingCart.Items.Remove(arg.RowData.ProductId);
            await SessionStorageService.SetItemAsync(nameof(ShoppingCart),  ShoppingCart);
        }
    }

    private async Task OnBuyBtnClick()
    {
        if (AuthenticationStateProvider is not null)
        {
            var httpClient = HttpClientFactory.CreateClient("Anonymous");
            httpClient.DefaultRequestHeaders.Accept.Clear();
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            AsyncRetryPolicy<HttpResponseMessage> retryPolicy = Policy<HttpResponseMessage>
                .Handle<HttpRequestException>()
                .WaitAndRetryAsync(Blazor.Shared.Entities.Constants.Constants.MaxHttpRequestRetries, times => TimeSpan.FromMilliseconds(times * 100));

            var order = new OrderForCreationDto
            {
                TotalPrice = ShoppingCart.TotalCost(),
                OrderNumber = Guid.NewGuid().ToString(),
                OrderItems = new List<OrderItemForCreationDto>(),
                UserId = int.Parse((await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Claims.SingleOrDefault(x => x.Type.ToString().Contains("sub"))!.Value)
            };
        
            foreach (var product in ShoppingCart.Items.Values)
            {
                order.OrderItems.Add(new OrderItemForCreationDto
                {
                    Amount = product.ProductQuantity,
                    Price = product.ProductPrice,
                    ProductId = product.ProductId
                });
            }
        
            var policyResult = await retryPolicy.ExecuteAndCaptureAsync(async () =>
                await httpClient.PostAsJsonAsync("Home/Cart", order));

            if (policyResult.Outcome == OutcomeType.Successful && policyResult.Result.IsSuccessStatusCode)
            {
                ShoppingCart.Items.Clear();
            }
            
            await this._dialogObj.HideAsync();
        }
    }
}


<style>
    .appbar-control-container .e-btn.e-inherit {
        margin: 0 3px;
    }
</style>