@page "/Manage/Account/Password/Reset/"
@using Blazor.Shared.Entities.RequestFeatures
@using Blazor.Presentation.Client.Services
@using Blazor.Shared.Entities.DataTransferObjects
@using Blazor.Shared.Entities.Identity
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs
@using Syncfusion.Blazor.Calendars
@inject AccountService AccountService
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = Policies.FromFrance)]

<PageTitle>Reset Password Requests</PageTitle>

@if (ResetPasswordRequests is null)
{
        <p><strong>Loading data ...</strong></p>
}
else
{
        <h1 class="fw-bold">Reset Password Requests Managment Table</h1>
        <div class="row">
                <div class="table-responsive">
                        <table class="table table-borderless align-middle">
                                <thead class="table-light">
                                <tr>
                                        <th scope="col">ID</th>
                                        <th scope="col">Email</th>
                                        <th scope="col">First Name</th>
                                        <th scope="col">Last Name</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Roles</th>
                                        <th scope="col">Reset Password Code</th>
                                        <th scope="col">Old Password</th>
                                        <th scope="col">Issue Date</th>
                                        <th scope="col">Expiration Date</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var resetPasswordRequest in ResetPasswordRequests)
                                {
                                        <tr>
                                                <td>@resetPasswordRequest.Id</td>
                                                <td>@resetPasswordRequest.User.Email</td>
                                                <td>@resetPasswordRequest.User.FirstName</td>
                                                <td>@resetPasswordRequest.User.LastName</td>
                                                <td>@(resetPasswordRequest.User.IsActive ? "Active" : "Inactive")</td>
                                                <td>@String.Join(", ", resetPasswordRequest.User.Roles)</td>
                                                <td>
                                                        
                                                        <div class="form-outline">
                                                                <textarea @bind="resetPasswordRequest.Code" class="form-control" disabled></textarea>
                                                        </div>
                                                </td>
                                                <td>@resetPasswordRequest.OldPassword</td>
                                                <td>@resetPasswordRequest.IssueDate</td>
                                                <td>@resetPasswordRequest.ExpirationDate</td>
                                        </tr>
                                }
                                </tbody>
                        </table> 
                </div>
        </div>
}

@code {
        List<ResetPasswordRequestDto> ResetPasswordRequests { get; set; } = new();
        ResetPasswordRequestParameters ResetPasswordRequestParameters { get; set; } = new()
        {
                PageSize = 10,
                PageNumber = 1
        };

        protected override async Task OnInitializedAsync() => await RefreshResetPasswordRequestFeatures();

        private async Task RefreshResetPasswordRequestFeatures()
        {
                ResetPasswordRequests = await AccountService.GetAllResetPasswordRequestsAsync(ResetPasswordRequestParameters);
        }

        private async Task OnNextCarouselItemsPage(MouseEventArgs e)
        {
                var resetPasswordRequestParameters = (ResetPasswordRequestParameters)ResetPasswordRequestParameters.Clone();
                resetPasswordRequestParameters.PageNumber++;
                
                ResetPasswordRequests = await AccountService.GetAllResetPasswordRequestsAsync(ResetPasswordRequestParameters);
                
                if (ResetPasswordRequests.Count > 0)
                {
                        ResetPasswordRequestParameters.PageNumber++;
                }
        }

        private async Task OnPrevCarouselItemsPage(MouseEventArgs e)
        {
                var resetPasswordRequestParameters = (ResetPasswordRequestParameters)ResetPasswordRequestParameters.Clone();
                resetPasswordRequestParameters.PageNumber--;
                
                ResetPasswordRequests = await AccountService.GetAllResetPasswordRequestsAsync(ResetPasswordRequestParameters);
                
                if (ResetPasswordRequests.Count > 0)
                {
                        ResetPasswordRequestParameters.PageNumber--;
                }
        }
}