@page "/ManageCarouselItems"
@using Blazor.Presentation.Client.Services;
@using Blazor.Shared.Entities.Constants
@using Blazor.Shared.Entities.DataTransferObjects
@using Blazor.Shared.Entities.Identity;
@using Blazor.Shared.Entities.Models
@using Blazor.Shared.Entities.RequestFeatures
@using Polly
@using Polly.Retry
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Grids
@using SelectionType = Syncfusion.Blazor.Grids.SelectionType
@using IHttpClientFactory = System.Net.Http.IHttpClientFactory
@inject CarouselItemService CarouselItemService
@inject IHttpClientFactory HttpClientFactory
@attribute [Authorize(Policy = Policies.FromFrance)]

<PageTitle>Carousel Items</PageTitle>

<h1>Management</h1>

<h2>Create Carousel Item</h2>
@if (_carouselItemForCreation?.Image != null)
{
    <div class="row">
        <div class="col-4">
            @if (_carouselItemForCreation.Image.ImageFile is null)
            {
                <figure class="img-container">
                    <img src="images/image-placeholder.jpg" alt="Image Place Holder" style="height:100%;width:100%;" />
                    <figcaption class="img-caption">Image Place Holder for Caption</figcaption>
                </figure>
            }
            else
            {
                <figure class="img-container">
                    <img src="@_selectedRow.Image" alt="@_selectedRow.ImageAlternativeText" style="height:100%;width:100%;" />
                    <figcaption class="img-caption">@_selectedRow.ImageCaption</figcaption>
                </figure>
            }
        </div>
        <div class="col-8">
            <SfTextBox Value="@_carouselItemForCreation.Alt" CssClass="mb-1" Placeholder="Image Alternative Text" FloatLabelType="@FloatLabelType.Auto" ShowClearButton=true></SfTextBox>
            <SfTextBox Value="@_carouselItemForCreation.Caption" CssClass="mb-1" Placeholder="Image Caption Text" FloatLabelType="@FloatLabelType.Auto" ShowClearButton=true></SfTextBox>
            <SfTextBox Value="@_carouselItemForCreation.Image.FileName" CssClass="mb-2" Placeholder="Image File Name" FloatLabelType="@FloatLabelType.Auto" ShowClearButton=true></SfTextBox>
            <div class="flex-row">
                <SfButton CssClass="e-outline" Content="Create" @onclick="@OnCreateCarouselItemButtonClick"></SfButton>
            </div>
        </div>
    </div>
}

<h2>Selected Carousel Item</h2>
@if (_selectedRow is not null)
{
    <div class="row">
        <div class="col-4">
            @if (String.IsNullOrEmpty(_selectedRow.Image))
            {
                <figure class="img-container">
                    <img src="images/image-placeholder.jpg" alt="Image Place Holder" style="height:100%;width:100%;" />
                    <figcaption class="img-caption">Image Place Holder for Caption</figcaption>
                </figure>
            }
            else
            {
                <figure class="img-container">
                    <img src="@_selectedRow.Image" alt="@_selectedRow.ImageAlternativeText" style="height:100%;width:100%;" />
                    <figcaption class="img-caption">@_selectedRow.ImageCaption</figcaption>
                </figure>
            }
        </div>
        <div class="col-8">
            <SfTextBox Value="@_selectedRow.Identifier.ToString()" CssClass="mb-1" Placeholder="Unique Identifier" FloatLabelType="@FloatLabelType.Auto" Enabled="false"></SfTextBox>
            <SfTextBox Value="@_selectedRow.ImageAlternativeText" CssClass="mb-1" Placeholder="Image Alternative Text" FloatLabelType="@FloatLabelType.Auto" ShowClearButton=true></SfTextBox>
            <SfTextBox Value="@_selectedRow.ImageCaption" CssClass="mb-2" Placeholder="Image Caption Text" FloatLabelType="@FloatLabelType.Auto" ShowClearButton=true></SfTextBox>
            <div class="flex-row">
                <SfButton CssClass="e-outline" Content="Delete" @onclick="OnDeleteSelectedRowButtonClick"></SfButton>
                <SfButton CssClass="e-outline" Content="Update" @onclick="OnUpdateSelectedRowButtonClick"></SfButton>
            </div>
        </div>
    </div>
}
else
{
    <p>There is not selected carousel item to display ...</p>
}

<h2>Carousel Items Table</h2>
@if (_dataGridRows is not null)
{
    <div class="row">
        <SfGrid @ref="@_dataGrid" DataSource="@_dataGridRows" AllowFiltering="true" AllowSorting="true" AllowPaging="true" AllowGrouping="true">
            <GridSelectionSettings Type="SelectionType.Single"></GridSelectionSettings>
            <GridEvents RowSelected="OnDataGridRowSelectedAsync" TValue="DataGridRow"></GridEvents>
            <GridPageSettings PageSize="10" CurrentPage="1"></GridPageSettings>
            <GridColumns>
                <GridColumn Field="@nameof(DataGridRow.Identifier)" HeaderText="Unique Identifier" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="@nameof(DataGridRow.ImageAlternativeText)" HeaderText="Image Alternative Text" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="@nameof(DataGridRow.ImageCaption)" HeaderText="Image Caption Text" TextAlign="TextAlign.Center"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
}
else
{
    <p>There are not carousel items to display ...</p>
}

@code {
    private SfGrid<DataGridRow> _dataGrid;
    private SfButton _deleteSelectedRowButton;
    private List<DataGridRow> _dataGridRows;
    private DataGridRow _selectedRow;

    private readonly CarouselItemForCreationDto _carouselItemForCreation = new()
    {
        Alt = String.Empty,
        Caption = String.Empty,
        Image = new ImageForCreationDto
        {
            FileName = String.Empty
        }
    };

    public sealed class DataGridRow
    {
        public int Identifier { get; set; }
        public string ImageAlternativeText { get; set; }
        public string ImageCaption { get; set; }
        public string Image { get; set; }
    }

    private readonly CarouselItemParameters _carouselItemParameters = new()
    {
        PageSize = 50,
        PageNumber = 1
    };

    private async Task OnDataGridRowSelectedAsync(RowSelectEventArgs<DataGridRow> args)
    {
        _selectedRow = args.Data;
        var policyResult = await ImageService.GetImageAsync(args.Data.Identifier);
        if (policyResult.Outcome == OutcomeType.Successful)
        {
            _selectedRow.Image = policyResult.Result.Src;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        {
            PolicyResult<List<Entity>> policyResult = await CarouselItemService.GetAllWithoutLinksAsync(_carouselItemParameters);
            if (policyResult.Outcome == OutcomeType.Successful)
            {
                _dataGridRows = policyResult.Result.Select(entity => new DataGridRow
                {
                    Identifier = Int32.Parse(entity["Id"].ToString() ?? String.Empty), 
                    ImageAlternativeText = entity["Alt"].ToString(), 
                    ImageCaption = entity["Caption"].ToString(), 
                    Image = String.Empty
                }).ToList();
            }
        }
        
        _selectedRow = _dataGridRows.FirstOrDefault();
        if (_selectedRow is not null)
        {
            var policyResult = await ImageService.GetImageAsync(_selectedRow.Identifier);
            if (policyResult.Outcome == OutcomeType.Successful)
            {
                _selectedRow.Image = policyResult.Result.Src;
            }
        }
    }

    private async Task OnDeleteSelectedRowButtonClick()
    {
        var responseDetails = await CarouselItemService.DeleteAsync(_selectedRow.Identifier);
        if (responseDetails.IsSuccess)
        {
            if (_dataGridRows.Remove(_selectedRow))
            {
                _selectedRow = _dataGridRows.FirstOrDefault();
                await _dataGrid.GoToPageAsync(1);
            }

            await _dataGrid.Refresh();
        }
        else
        {
            await _dataGrid.Refresh();
        }
    }
    

    public Task OnUpdateSelectedRowButtonClick(MouseEventArgs e)
    {
        return Task.CompletedTask;
    }

    public Task OnCreateCarouselItemButtonClick(MouseEventArgs e)
    {
        return Task.CompletedTask;
    }
}