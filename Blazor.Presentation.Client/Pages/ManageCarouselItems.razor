@page "/ManageCarouselItems"
@using Blazor.Presentation.Client.Services;
@using Blazor.Shared.Entities.Identity;
@using Blazor.Shared.Entities.Models
@using Blazor.Shared.Entities.RequestFeatures
@using Polly
@inject CarouselItemService CarouselItemService
@inject ImageService ImageService
@attribute [Authorize(Policy = Policies.FromFrance)]

<PageTitle>Carousel Items</PageTitle>

@if (CarouselItems is null)
{
        <p><strong>Loading data ...</strong></p>
}
else
{
        <h1 class="fw-bold">Carousel Items Managment Table</h1>
        <div class="row">
                <table class="table table-borderless">
                        <thead class="table-light">
                        <tr>
                                <th scope="col">Search</th>
                                <th scope="col">Paging</th>
                                <th scope="col">Ordering</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                                <td></td>
                                <td>
                                        <div class="flex-row">
                                                <button class="btn btn-sm" @onclick="OnPrevCarouselItemsPage">Prev</button>
                                                <button class="btn btn-sm active">@CarouselItemParameters.PageNumber</button>
                                                <button class="btn btn-sm" @onclick="OnNextCarouselItemsPage">Next</button>
                                        </div>
                                </td>
                                <td></td>
                        </tr>
                        </tbody>
                </table>
        </div>
        <div class="row">
                <div class="table-responsive">
                        <table class="table table-borderless align-middle">
                                <thead class="table-light">
                                <tr>
                                        <th scope="col">Image</th>
                                        <th scope="col">Unique Identifier</th>
                                        <th scope="col">Image Alternative Text</th>
                                        <th scope="col">Image Caption Text</th>
                                        <th scope="col">Operation</th>
                                        <th scope="col">Operation</th>
                                </tr>
                                </thead>
                                <tbody>
                                @for (var index = 0; index < CarouselItems.Count; index++)
                                {
                                        var carouselItemId = Int32.Parse(CarouselItems[index]["Id"].ToString() ?? "0");
                                        <tr>
                                                <td>
                                                        <figure class="img-container">
                                                                @if (CarouselItems[index].ContainsKey("Src"))
                                                                {
                                                                        <img src="@CarouselItems[index]["Src"]" alt="" style="height: calc(10vw / 1.78 - 1px);"/>
                                                                }
                                                                else
                                                                {
                                                                        <img src="images/image-placeholder.jpg" alt="@CarouselItems[index]["Caption"]" style="height: calc(10vw / 1.78 - 1px);"/>
                                                                }
                                                                <figcaption class="img-caption">@CarouselItems[index]["Caption"]</figcaption>
                                                        </figure>
                                                </td>
                                                <td>@CarouselItems[index]["Id"]</td>
                                                <td>@CarouselItems[index]["Alt"]</td>
                                                <td>@CarouselItems[index]["Caption"]</td>
                                                <td><button class="btn btn-sm">Edit</button></td>
                                                <td><button class="btn btn-sm" @onclick="() => OnDeleteCarouselItemClick(carouselItemId)">Delete</button></td>
                                        </tr>
                                }
                                </tbody>
                        </table> 
                </div>
        </div>
}

@code {
        List<Entity> CarouselItems { get; set; } = new();
        CarouselItemParameters CarouselItemParameters { get; set; } = new()
        {
                PageSize = 10,
                PageNumber = 1
        };

        int text;

        protected override async Task OnInitializedAsync()
        {
                var policyResponse = await CarouselItemService.GetAllAsync(CarouselItemParameters);
                if (policyResponse.Outcome == OutcomeType.Successful &&
                    policyResponse.Result is not null)
                {
                        CarouselItems = policyResponse.Result;
                        foreach (var carouselItem in CarouselItems)
                        {
                                var image = await DownloadImageAsync(Int32.Parse(carouselItem["Id"].ToString()!));
                                carouselItem.Add("Src", image);
                        }
                }
        }

        private async Task<string> DownloadImageAsync(int carouselItemId)
        {
                var policyResponse = await ImageService.GetImageAsync(carouselItemId);
                if (policyResponse.Outcome != OutcomeType.Successful ||
                    policyResponse.Result is null) return "images/image-placeholder.jpg";
                
                var image = policyResponse.Result;

                return String.IsNullOrEmpty(image.Src) 
                        ? "images/image-placeholder.jpg" 
                        : image.Src;
        }

        private async Task OnNextCarouselItemsPage(MouseEventArgs e)
        {
                var carouselItemParameters = (CarouselItemParameters)CarouselItemParameters.Clone();
                carouselItemParameters.PageNumber++;
                
                var policyResponse = await CarouselItemService.GetAllAsync(carouselItemParameters);
                
                if (policyResponse.Outcome == OutcomeType.Successful &&
                    policyResponse.Result is not null && policyResponse.Result.Count > 0)
                {
                        CarouselItemParameters.PageNumber++;
                        CarouselItems = policyResponse.Result;
                        foreach (var carouselItem in CarouselItems)
                        {
                                var image = await DownloadImageAsync(Int32.Parse(carouselItem["Id"].ToString()!));
                                carouselItem.Add("Src", image);
                        }
                }
        }

        private async Task OnPrevCarouselItemsPage(MouseEventArgs e)
        {
                var policyResult = await CarouselItemService.GetAllAsync(new CarouselItemParameters
                {
                        PageSize = CarouselItemParameters.PageSize,
                        PageNumber = CarouselItemParameters.PageNumber - 1, // Request next page
                        Fields = CarouselItemParameters.Fields,
                        MaxId = CarouselItemParameters.MaxId,
                        MinId = CarouselItemParameters.MinId,
                        OrderBy = CarouselItemParameters.OrderBy,
                        SearchTerm = CarouselItemParameters.SearchTerm
                });
                
                if (policyResult.Outcome == OutcomeType.Successful &&
                    policyResult.Result is not null && policyResult.Result.Count > 0)
                {
                        CarouselItemParameters.PageNumber--;
                        CarouselItems = policyResult.Result;
                        foreach (var carouselItem in CarouselItems)
                        {
                                var image = await DownloadImageAsync(Int32.Parse(carouselItem["Id"].ToString()!));
                                carouselItem.Add("Src", image);
                        }
                }
        }

        private async Task OnDeleteCarouselItemClick(int carouselItemId)
        {
                var policyResult = await CarouselItemService.DeleteAsync(carouselItemId);
                if (policyResult.Outcome == OutcomeType.Successful && policyResult.Result.IsSuccessStatusCode)
                {
                        CarouselItems = CarouselItems
                                .Where(entity => entity["Id"].ToString() != carouselItemId.ToString())
                                .ToList();
                }
        }
}