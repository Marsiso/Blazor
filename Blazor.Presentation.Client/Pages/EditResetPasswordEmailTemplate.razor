@page "/Account/Password/Reset/Email/Template"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.RichTextEditor.Internal
@using Syncfusion.DocIO
@using Syncfusion.DocIO.DLS
@using Blazor.Shared.Entities.DataTransferObjects
@using Blazor.Presentation.Client.Services

<h1>Email Message Template Editor</h1>
<p><strong>Include [RECIPIENT] attribute to be later on replaced by actual recepient's name.</strong></p>
<p><strong>Include [LINK] attribute to be later on replaced by actual reset password link.</strong></p>

<div class="flex-row mb-3">
    <SfButton CssClass="e-flat" @onclick="@GetText">Get Text</SfButton>
    <SfButton CssClass="e-flat" @onclick="@GetValue">Preview Email Message Template</SfButton>
</div>

<div class="row h-100">
    <SfDialog @ref="_dialogObj" @bind-Visible="@_visibility" Content="@_content" Header="@_header" Target="#target" 
              ShowCloseIcon="true" Width="80%">
        <DialogButtons>
            <DialogButton Content="Ok" IsPrimary="true" OnClick="@DlgButtonClick" />
        </DialogButtons>
    </SfDialog>
    
    <EditForm Model="_template" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        
        <SfRichTextEditor @ref="_rteObj" @bind-Value="@_template.Payload" ShowCharCount="true" MaxLength="1000" UndoRedoSteps="50"
                          UndoRedoTimer="400" EnableResize="true">
            <RichTextEditorToolbarSettings Items="@_tools"/>
            <RichTextEditorQuickToolbarSettings Image="@_image" Link="@_link"/>
        </SfRichTextEditor>
        
        <SfButton type="submit" CssClass="e-flat mt-2 w-100" Disabled="_isBlocked">Update Template</SfButton>
    </EditForm>
</div>

@code {

    [Inject]
    public AccountService AccountService { get; set; }
    
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private SfRichTextEditor _rteObj;
    private SfDialog _dialogObj;
    private string _content;
    private bool _visibility = false;
    private string _header = "Message Template";
    private readonly ResetPasswordEmailTemplateForCreationDto _template = new() { Payload = "<p>Hello <strong>[RECIPIENT]</strong>,\n</p><br><p>If you've lost your password or wish to reset it, use the link below.</p>\n<a href=\"[LINK]\">Reset Your Password</a><br><br>\n<p>If you did not request a password reset, you can safely ignore this email. Only a person with access to your email can reset your account password.</p>" };
    private bool _isBlocked;
    
    private readonly List<ToolbarItemModel> _tools = new()
    {
        new ToolbarItemModel { Command = ToolbarCommand.Bold },
        new ToolbarItemModel { Command = ToolbarCommand.Italic },
        new ToolbarItemModel { Command = ToolbarCommand.Underline },
        new ToolbarItemModel { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel { Command = ToolbarCommand.FontName },
        new ToolbarItemModel { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.Formats },
        new ToolbarItemModel { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.LowerCase },
        new ToolbarItemModel { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel { Command = ToolbarCommand.Indent },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel { Command = ToolbarCommand.Image },
        new ToolbarItemModel { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel { Command = ToolbarCommand.Print },
        new ToolbarItemModel { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel { Command = ToolbarCommand.FullScreen },
        new ToolbarItemModel { Command = ToolbarCommand.Separator },
        new ToolbarItemModel { Command = ToolbarCommand.Undo },
        new ToolbarItemModel { Command = ToolbarCommand.Redo },
        new ToolbarItemModel() { Command = ToolbarCommand.NumberFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.BulletFormatList }
    };
    
    private readonly List<ImageToolbarItemModel> _image = new()
    {
        new ImageToolbarItemModel { Command = ImageToolbarCommand.Replace },
        new ImageToolbarItemModel { Command = ImageToolbarCommand.Align },
        new ImageToolbarItemModel { Command = ImageToolbarCommand.Caption },
        new ImageToolbarItemModel { Command = ImageToolbarCommand.Remove },
        new ImageToolbarItemModel { Command = ImageToolbarCommand.OpenImageLink },
        new ImageToolbarItemModel { Command = ImageToolbarCommand.HorizontalSeparator },
        new ImageToolbarItemModel { Command = ImageToolbarCommand.EditImageLink },
        new ImageToolbarItemModel { Command = ImageToolbarCommand.RemoveImageLink },
        new ImageToolbarItemModel { Command = ImageToolbarCommand.Display },
        new ImageToolbarItemModel { Command = ImageToolbarCommand.AltText },
        new ImageToolbarItemModel { Command = ImageToolbarCommand.Dimension }
    };
    
    private readonly List<LinkToolbarItemModel> _link = new()
    {
        new LinkToolbarItemModel { Command = LinkToolbarCommand.Open },
        new LinkToolbarItemModel { Command = LinkToolbarCommand.Edit },
        new LinkToolbarItemModel { Command = LinkToolbarCommand.UnLink }
    };
    
    private async Task GetText()
    {
        this._content = await this._rteObj.GetTextAsync();
        await this._dialogObj.ShowAsync();
    }
    private async Task DlgButtonClick(object arg)
    {
        await this._dialogObj.HideAsync();
    }
    
    private async Task GetValue()
    {
        this._content = this._template.Payload;
        await this._dialogObj.ShowAsync();
    }
    
    private async Task OnValidSubmit()
    {
        _isBlocked = true;
        var isSuccessful = await AccountService.TryCreateResetPasswordEmailTemplate(_template);
        if (isSuccessful)
        {
            NavigationManager.NavigateTo("#");
        }
        
        _isBlocked = false;
    }
}

<style>
  .e-richtexteditor {
      min-width: 100%;
      min-height: 50vh;
  }
</style>